<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes of wgundamj44</title>
    <link>http://wgundamj44.github.io/</link>
    <description>Recent content on Notes of wgundamj44</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wgundamj44.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use Nginx to manage django sites in docker</title>
      <link>http://wgundamj44.github.io/post/2015-11-30-use-nginx-to-manage-django-sites-in-docker/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-11-30-use-nginx-to-manage-django-sites-in-docker/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;http://wgundamj44.github.io/post/2015-08-13-project-note2/&#34;&gt;previous post&lt;/a&gt;, I setuped my django develop enviroment with docker. It works fine but with one problem, it use Django&amp;rsquo;s &lt;code&gt;runserver&lt;/code&gt; command to manage all the static files, the page load time is very long, sometimes it even stucks in page loading forever. So I decide to to nginx to replace command of Django.&lt;/p&gt;

&lt;h3 id=&#34;set-up-a-uwsgi:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;Set up a uwsgi&lt;/h3&gt;

&lt;p&gt;To use python with nginx, uwsgi is our first choice.&lt;/p&gt;

&lt;p&gt;I created mysite.yaml like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;uwsgi:
	socket: 0.0.0.0:8000
	master: true
	no-orphans: true
	processes: 1
	uid: root
	gid: root
	chdir: /code # where my django app resides in the docker container
	env: DJANGO_SETTINGS_MODULE=xxxx # my django setting file
	module: xxx # my wsgi module
	buffer-size: 40960
	enable-threads: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several notes here:
- root as uid, gid is a bad choice. I set it like this just for convenience.
- socket is bind to 0.0.0.0:8000, so that nginx can get access to this socket from another docker container
- when started, uwsgi will start a the wsgi module set in the module entry, and serve it at port 8000.
Save this mysite.yaml to ./uwsgi folder, our web container becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;web:
	build: ./python
	volumes:
	  - ./mycode:/code
	  - ./uwsgi:/uwsgi
	command: uswgi --yaml /uwsgi/mysite.yaml
	ports:
	  - &amp;quot;8000:8000&amp;quot;
	links:
	  - db
	  - rabbitmq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-up-nginx:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;Set up nginx&lt;/h3&gt;

&lt;p&gt;With uwsgi set, the nginx site configure file mysite.conf likes like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
	listen          8080;
	server_name     my.test-site.local;
	client_max_body_size 50M;
	ssl off;
	location ~* /favicon.ico {
		empty_gif;
	}

	location / {
		include uwsgi_params;
		uwsgi_pass  uwsgicluster;
		uwsgi_param UWSGI_SCHEME $scheme;
	}

	location ^~ /static/ {
		alias xxxx # path to my static files;
	}
}
upstream uwsgicluster {
	server web:8000;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;About nginx&amp;rsquo;s &lt;code&gt;nginx.conf&lt;/code&gt;, I used a default one with one modification: Add &lt;code&gt;daemon off&lt;/code&gt; at head, otherwise when nginx get started, its main process will quit making container exit too, which is not what we want.
The final nginx.conf is like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;daemon off;
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;

pid        /var/run/nginx.pid;

events {
	worker_connections  1024;
}
	
http {
	include       /etc/nginx/mime.types;
	default_type  application/octet-stream;

	access_log  /var/log/nginx/access.log  main;
	sendfile        on;
	
	keepalive_timeout  65;
	
	gzip  on;

	server {
		listen 80;
		return 301 https://$host$request_uri;
	}

	include /etc/nginx/conf.d/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we add a new entry into docker-compose.yaml for nginx container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;nginx:
image: nginx
  volumes:
    - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
    - ./nginx/conf/conf.d/mysite.conf:/etc/nginx/conf.d/mysite.conf
    - ./mycode:/code
  command: /etc/init.d/nginx start
  ports:
    - &amp;quot;8080:8080&amp;quot;
  links:
    - web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important part here is the &lt;code&gt;uwsgi_pass&lt;/code&gt; part, which forward all the request other than static files to web:8000. &lt;code&gt;web:8000&lt;/code&gt; is the service on web container.&lt;/p&gt;

&lt;p&gt;Also, with &lt;code&gt;location&lt;/code&gt; part, the static files now will be handled by nginx.&lt;/p&gt;

&lt;p&gt;Now the access the my web app is much faster.&lt;/p&gt;

&lt;h3 id=&#34;add-reload-capacity-to-uwsgi:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;Add reload capacity to uwsgi&lt;/h3&gt;

&lt;p&gt;The downside of the above configuration is we lose the ability to automatically restart server when code is changed. To solve this, add these lines to the uswgi entry wsgi file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import uwsgi
from uwsgidecorators import timer
from django.utils import autoreload

@timer(3)
def change_code_gracefull_reload(sig):
	if autoreload.code_changed():
		uwsgi.reload()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This snippets make use of &lt;code&gt;autoreload&lt;/code&gt; of Django, and restart uwsgi if code is changed.&lt;/p&gt;

&lt;h3 id=&#34;manage-multiple-sites:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;Manage multiple sites&lt;/h3&gt;

&lt;p&gt;To serve multiple sites in the same ip, we should modify both nginx and uwsgi.&lt;/p&gt;

&lt;h4 id=&#34;server-block-of-nginx:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;server block of nginx&lt;/h4&gt;

&lt;p&gt;For nginx part, we make use of its &lt;code&gt;server block&lt;/code&gt; mechanism: load different configs based on host name. I add a new conf file for my new site, say &amp;ldquo;my2.test-site.local&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
	listen          8080;
	server_name     my2.test-site.local;
	client_max_body_size 50M;
	ssl off;
	location ~* /favicon.ico {
		empty_gif;
	}

	location / {
		include uwsgi_params;
		uwsgi_pass  uwsgicluster;
		uwsgi_param UWSGI_SCHEME $scheme;
	}

	location ^~ /static/ {
		alias xxxx # path to my static files for my2.test-site.local;
	}
}
upstream uwsgicluster {
	server web:3000;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note here, we listen to the same port as &lt;code&gt;my.test-site.local&lt;/code&gt;, but forward the request to different upstream uwsgi, and serve static files in different folder.&lt;/p&gt;

&lt;p&gt;Next we should set our new upstream uwsgi.&lt;/p&gt;

&lt;h4 id=&#34;emperor-of-uwsgi:0ed7f348116ffd69af85d06cac6021e5&#34;&gt;emperor of uwsgi&lt;/h4&gt;

&lt;p&gt;Of course we can set up two uwsgi manually to serve two sites, uwsgi offers a better way: emperor mode. This emperor mode basically monitors some config files, and when we add or remove uwsgi config files, it add or remove uwsgi process accordingly.&lt;/p&gt;

&lt;p&gt;Its usage is simple, just the command &lt;code&gt;uwsgi --emperor /uwsgi/conf/&lt;/code&gt;, where &lt;code&gt;/uwsgi/conf/&lt;/code&gt; is the folder where all the sites&amp;rsquo; uwsgi files reside. We just put the conf for new site into this folder, and everything works automatically.&lt;/p&gt;

&lt;p&gt;The conf for &lt;code&gt;my2.test-site.local&lt;/code&gt; is like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;uwsgi:
	socket: 0.0.0.0:3000
	master: true
	no-orphans: true
	processes: 1
	uid: root
	gid: root
	chdir: /code # where my django app resides in the docker container
	env: DJANGO_SETTINGS_MODULE=xxxx # my django setting file
	module: xxx # my wsgi module
	buffer-size: 40960
	enable-threads: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;socket&lt;/code&gt; here, it&amp;rsquo;s bound to port 3000 which consistent with nginx configuration.&lt;/p&gt;

&lt;p&gt;Finally, set &lt;code&gt;my.test-site.local&lt;/code&gt; and &lt;code&gt;my2.test-site.local&lt;/code&gt; both to &lt;code&gt;localhost&lt;/code&gt; in hosts settings. Then we have two sites for one ip, and runs perfectly fast.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solve pylint import error in Django</title>
      <link>http://wgundamj44.github.io/post/2015-10-23-pylint-import-error-in-django/</link>
      <pubDate>Fri, 23 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-10-23-pylint-import-error-in-django/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using emacs flycheck with pylint to lint my Django project. Everything goes well except I constantly reports
import error for my user-defined modules. The system modules are ok, the Django modules are ok too. We know that python uses
sys.path to search for modules, so the problem must be python interpreter sees different sys.path value to pylint.&lt;/p&gt;

&lt;p&gt;So I created a pylintrc file, and put it in the base folder of my project(the folder contains manage.py), in content is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[Master]
init-hook=&#39;import sys; sys.path.append(&amp;quot;/base/folder/of/my/project&amp;quot;)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I found import error disappears. So the reason is clear, pylint lacks the path to the base folder of my project.&lt;/p&gt;

&lt;p&gt;As mentioned in the pydocs, when script invokes the interpreter, the path to this script will be added to the head of sys.path.
manage.py is the entry script of Django project, so the folder of manage.py will be added to sys.path, as a result, all the modules can be
import relative to this path. That is why our Django project can import self-made module properly. To mimic this behavior, a properer way of
writing pylintrc above is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[Master]
init-hook=&#39;import sys; sys.path = [&amp;quot;/base/folder/of/my/project&amp;quot;] + sys.path&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Some project notes: Bootstrap of Django</title>
      <link>http://wgundamj44.github.io/post/2015-09-30-project-node-4/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-09-30-project-node-4/</guid>
      <description>

&lt;h2 id=&#34;boostrap-of-django:b5247f547e103bba4bcf33f457074e2b&#34;&gt;boostrap of django&lt;/h2&gt;

&lt;h3 id=&#34;class-apps:b5247f547e103bba4bcf33f457074e2b&#34;&gt;Class Apps&lt;/h3&gt;

&lt;p&gt;Everything begins from django.setup(). In this method, it will import django.apps, and as a side effect, &lt;code&gt;apps&lt;/code&gt; is created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apps&lt;/code&gt; is an instance of django.registry.Apps. This class holds several important fields, &lt;code&gt;all_models&lt;/code&gt; which hold all the mapping of from app labels to model. &lt;code&gt;app_configs&lt;/code&gt; is all the configurations of app in django. When bootstrapping, &lt;code&gt;apps.populate&lt;/code&gt; will be called passing all the apps listed in settings.INSTALLED_APPS. It traverse the apps one by one, and create an &lt;code&gt;AppConfig&lt;/code&gt; for each app, and insert it to &lt;code&gt;app_configs&lt;/code&gt;. When bootstrapped finished, it will call &lt;code&gt;ready&lt;/code&gt; of each app. So, if we what some work to be done after app started, we can do it in ready method of &lt;code&gt;AppConfig&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apps&lt;/code&gt; has a &lt;code&gt;register_model&lt;/code&gt; method, which will insert a model to &lt;code&gt;all_models&lt;/code&gt; of apps. The method is called at &lt;code&gt;ModelBase&lt;/code&gt; of django.db.models.base. We know that for creation of every
model class, &lt;code&gt;ModelBase&lt;/code&gt; will be called, and inside its &lt;code&gt;__new__&lt;/code&gt; method, it will call register_model to register itself.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;populate&lt;/code&gt;, for each &lt;code&gt;AppConfig&lt;/code&gt;, it also use &lt;code&gt;import_models&lt;/code&gt; to load models. But here is the misleading part, in the call &lt;code&gt;import_models(all_models)&lt;/code&gt;, all_models is actually None. In &lt;code&gt;import_models&lt;/code&gt;, it will check if this app has a model module, if so it will import the model. When the model is imported, every model class in model module will be created, and &lt;code&gt;ModelBase&lt;/code&gt; will be called. As mentioned above, &lt;code&gt;all_models&lt;/code&gt; will be filled in &lt;code&gt;ModelBase&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;class-appconfig:b5247f547e103bba4bcf33f457074e2b&#34;&gt;Class AppConfig&lt;/h3&gt;

&lt;p&gt;This class hold the informations of an app, eg. name, label, models, etc. AppConfig has a factory method to create itself. When we insert an entry in settings.INSTALLED_APPS, if the
entry is moudle name, then &lt;code&gt;create&lt;/code&gt; will try to import it. If the imported module has a &lt;code&gt;default_app_config&lt;/code&gt; attribute which is a subclass of AppConfig, then it will be imported, and become the runtime class of &lt;code&gt;AppConfig&lt;/code&gt; instance. Otherwise, the default implmentation of AppConfig will be used.&lt;/p&gt;

&lt;h3 id=&#34;wrap-up:b5247f547e103bba4bcf33f457074e2b&#34;&gt;Wrap up&lt;/h3&gt;

&lt;p&gt;When jdango finishes bootstrap, its &lt;code&gt;django.apps&lt;/code&gt; will contains a &lt;code&gt;app_configs&lt;/code&gt; containing the config infomations for each installed_apps, and &lt;code&gt;all_models&lt;/code&gt; containing all the models.&lt;/p&gt;

&lt;h2 id=&#34;from-request-to-view:b5247f547e103bba4bcf33f457074e2b&#34;&gt;From request to view&lt;/h2&gt;

&lt;p&gt;We start the story from &lt;code&gt;django.core.handlers.wsgi.WSGIHandler&lt;/code&gt;, from experience of werkzeug, we know that this handler is for the handling of request. And it has our old friend &lt;code&gt;__call__(self, environ, start_response)&lt;/code&gt; &amp;ndash; a standard WSGI app function, as mentioned in &lt;a href=&#34;http://wgundamj44.github.io/post/2015-05-21-http-service-in-python/&#34;&gt;this post&lt;/a&gt;. In this function, it does two things: generate a request object, get a response object from request.&lt;/p&gt;

&lt;h3 id=&#34;generate-a-request:b5247f547e103bba4bcf33f457074e2b&#34;&gt;Generate a request&lt;/h3&gt;

&lt;p&gt;The code &lt;code&gt;request = self.request_class(environ)&lt;/code&gt; generates a reqeust object, where request_class is &lt;code&gt;WSGIRequest&lt;/code&gt;. The request object holds lots of information about this coming request, eg. its method, its path, etc. This request object is what we got in request paremter of &lt;code&gt;view_handler(request, xxx)&lt;/code&gt; in views.&lt;/p&gt;

&lt;h3 id=&#34;get-a-response:b5247f547e103bba4bcf33f457074e2b&#34;&gt;Get a response&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BaseHandler.get_response(self, request)&lt;/code&gt; is where response is generated. It will first go through each request middleware, and try to make a response. Global operation like CSRF prevention happens in this stage. If none of the request middleware made a response, then the request will be matched with URLResovler, and try to find a view method that handles the request. This is were our URL router and view functions get used. If any exception happens, exception middleware will take control and try to make response. Then if response has &lt;code&gt;render&lt;/code&gt; method, template response middleware will get in and render a new response. Finally response middleware proccesses the response and make final response.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some project notes: ORM in Django</title>
      <link>http://wgundamj44.github.io/post/2015-09-26-project-note-3/</link>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-09-26-project-note-3/</guid>
      <description>

&lt;h2 id=&#34;transaction-in-django:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;Transaction in Django&lt;/h2&gt;

&lt;h3 id=&#34;atomic:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;atomic&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@atomic
def transaction_func():
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We know that a decorator will return a wrapper function/class of the decorated function. In Django, the an instance of Atomic class is returned. Atomic is a subclass of ContextDecorator, it is callable because ContextDecorator has a &lt;code&gt;__call__&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In ContextDecorator&amp;rsquo;s &lt;code&gt;__call__&lt;/code&gt;, we can see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@wraps(func, assigned=available_attrs(func))
def inner(*args, **kwargs):
    with self:
        return func(*args, **kwargs)
return inner
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the wrapped function will be put into a context &lt;code&gt;self&lt;/code&gt;. In its context control function,
&lt;code&gt;__enter__&lt;/code&gt; will open a new transaction if not already in one or create a new savepoint if otherwise. &lt;code&gt;__exit__&lt;/code&gt; is rather complex. Generally, if atomic is wrapped in another atomic, then the inner one will be treated as a savepoint if not be told otherwise. when the inner one exits, Django will try to commit the inner savepoint, and rollback the savepoint and set &lt;code&gt;needs_rollback&lt;/code&gt; flag if error occurs. If everything goes well, then in the outermost atomic exits, Django will commit the transaction.&lt;/p&gt;

&lt;h3 id=&#34;database-connections:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;database connections&lt;/h3&gt;

&lt;p&gt;In Django settings, we wrote DATABASES like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;Django.db.backends.mysql&#39;, # Add &#39;postgresql_psycopg2&#39;, &#39;mysql&#39;, &#39;sqlite3&#39; or &#39;oracle&#39;.
        &#39;NAME&#39;: &#39;&#39;,                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        &#39;USER&#39;: &#39;&#39;,
        &#39;PASSWORD&#39;: &#39;&#39;,
        &#39;HOST&#39;: &#39;&#39;,                      # Empty for localhost through domain sockets or &#39;127.0.0.1&#39; for localhost through TCP.
        &#39;PORT&#39;: &#39;&#39;,                      # Set to empty string for default.
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So how this info is used? Django has a class &lt;code&gt;ConnectionHandler&lt;/code&gt;. This class holds the &lt;code&gt;DATABSES&lt;/code&gt; in its &lt;code&gt;_database&lt;/code&gt; dict. Also, it has a &lt;code&gt;_connection&lt;/code&gt; dict, which stores the connections to databases. For example, for our DATABASES above, &lt;code&gt;_connection&lt;/code&gt; will have a &lt;code&gt;default&lt;/code&gt; attribute, with its value the connection instance which talks to the database. All the db manipulations, like transaction, rollback etc. will be carried out through this connection instance.&lt;/p&gt;

&lt;h2 id=&#34;behind-model-class-of-django:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;Behind model class of Django&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField(&#39;date published&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we use the above code to create a model in Django, we get a class &lt;code&gt;Question&lt;/code&gt;. If we try to invoke &lt;code&gt;Question.pub_date&lt;/code&gt;, we get an attribute error saying that pub_date isn&amp;rsquo;t there.
Instead, in &lt;code&gt;Question._meta.fields&lt;/code&gt; we find these fields. So, models.Model does more than it appears to do.&lt;/p&gt;

&lt;p&gt;In the definition of models.Model, I find it has a base class &lt;code&gt;six.with_metaclass(ModelBase)&lt;/code&gt;. Here its base class is not the simple ModelBase, &lt;code&gt;with_metaclass&lt;/code&gt; made a dummy class like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def with_metaclass(meta, *bases):
    class metaclass(meta):
        def __new__(cls, name, this_bases, d):
            return meta(name, bases, d)
    return type.__new__(metaclass, &#39;temporary_class&#39;, (), {})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a python2/3 compatible way of setting metaclass.
About metaclass, there&amp;rsquo;s an excellent article in &lt;a href=&#34;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&#34;&gt;stackoverflow&lt;/a&gt;. Simply put, metaclass is the class of class or a class is an instance of its metaclass. When a class is defined, the class&amp;rsquo;s metaclass is called to create the class itself.&lt;/p&gt;

&lt;p&gt;So how this with_metaclass works?&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;six.with_metaclass(ModelBase)&lt;/code&gt; is invoked, its return value is a class. This class is an instance of &lt;code&gt;metaclass&lt;/code&gt;, as &lt;code&gt;type.__new__(metaclass)&lt;/code&gt; implies. Now &lt;code&gt;Model&lt;/code&gt;&amp;rsquo;s base class (The return value of &lt;code&gt;with_metaclass&lt;/code&gt;) is a class whose &lt;strong&gt;class&lt;/strong&gt; will be &lt;code&gt;metaclass&lt;/code&gt;. According to &lt;a href=&#34;https://docs.python.org/2/reference/datamodel.html#__metaclass__&#34;&gt;python doc&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if there is at least one base class, its metaclass is used
(this looks for a &lt;strong&gt;class&lt;/strong&gt; attribute first and if not found, uses its type)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Model&lt;/code&gt;&amp;rsquo;s metaclass will be &lt;code&gt;metaclass&lt;/code&gt;, so will all its sub classes. As a result, when &lt;code&gt;Question&lt;/code&gt; is defined, &lt;code&gt;__new__&lt;/code&gt; of &lt;code&gt;metaclass&lt;/code&gt; will be called to create &lt;code&gt;Question&lt;/code&gt; class, and it returns an instance of &lt;code&gt;ModelBase&lt;/code&gt;, this instance becomes the content of &lt;code&gt;Question&lt;/code&gt; class we saw.&lt;/p&gt;

&lt;p&gt;How does &lt;code&gt;ModelBase&lt;/code&gt; create the content of &lt;code&gt;Question&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;First thing I can see is that, it attach &lt;code&gt;_meta&lt;/code&gt; object to model class. _meta is an object of class &lt;code&gt;Options&lt;/code&gt;. This &lt;code&gt;Options&lt;/code&gt; holds many information about model, including primary key, app_label, fields, etc. Attributes in &lt;code&gt;Meta&lt;/code&gt; Class of Model will be stored here. This can answer our problem of where has the fields gone? They were added to _meta in the &lt;code&gt;__new__&lt;/code&gt; of &lt;code&gt;ModelBase&lt;/code&gt;. Interestingly, fields is actually a method in &lt;code&gt;Options&lt;/code&gt;, when called return a list on the fly.&lt;/p&gt;

&lt;p&gt;Second, install &lt;code&gt;Manager&lt;/code&gt; of model. This is VERY complex, the behavior depends heavily on if the model is abstract, proxy or its parents. Anyway, at least &lt;code&gt;ensure_default_manager&lt;/code&gt; will be called, so that we can call &lt;code&gt;Question.objects&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Third, add &lt;code&gt;DoesNotExist&lt;/code&gt; and &lt;code&gt;MultipleObjectsReturned&lt;/code&gt; exception for model.&lt;/p&gt;

&lt;h2 id=&#34;many-methods-of-manager-belongs-to-queryset:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;Many methods of Manager belongs to QuerySet&lt;/h2&gt;

&lt;p&gt;We often use something like &lt;code&gt;Question.objects.filter()&lt;/code&gt;, actually this method comes from class &lt;code&gt;QuerySet&lt;/code&gt;. The definition of &lt;code&gt;Manager&lt;/code&gt; is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Manager(BaseManager.from_queryset(QuerySet)):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;from_queryset&lt;/code&gt; is a classmethod, it will &amp;lsquo;copy&amp;rsquo; necessary methods from QuerySet into BaseManager. This &amp;lsquo;copy&amp;rsquo; is a delegation, when we call &lt;code&gt;filter&lt;/code&gt; on &lt;code&gt;Manager&lt;/code&gt;, what happens is that the Manager instance will call the same function on the &lt;code&gt;queryset&lt;/code&gt; obtained by calling &lt;code&gt;get_queryset&lt;/code&gt;. That&amp;rsquo;s why when customizing Managers, we often override the &lt;code&gt;get_queryset&lt;/code&gt; method, so that any following query functions will all carried out based on the customized &lt;code&gt;queryset&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;fields-in-django-orm:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;Fields in Django ORM&lt;/h2&gt;

&lt;h2 id=&#34;how-query-is-generated-in-django-orm:b35bf9b141e6de095a24e0cf55cb1975&#34;&gt;How query is generated in Django ORM&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Some project notes: Develop enviroment</title>
      <link>http://wgundamj44.github.io/post/2015-08-13-project-note2/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-08-13-project-note2/</guid>
      <description>

&lt;h2 id=&#34;develop-enviroment-with-docker:e7d43dfc46b4cac080bf58b0a0e5c283&#34;&gt;Develop enviroment with Docker&lt;/h2&gt;

&lt;p&gt;I used docker-compose to build my develop enviroment. The project consists of MySQL, django and celery(RabbitMQ). So my docker-compose.yml will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;db:
  build: ./mysql
  environment:
    - MYSQL_ROOT_PASSWORD=testtest
  volumes:
    - /develop/db:/var/lib/mysql

rabbitmq:
  image: tutum/rabbitmq
environment:
  - RABBITMQ_PASS=guest
ports:
  - &amp;quot;5672:5672&amp;quot;  # we forward this port because it&#39;s useful for debugging
  - &amp;quot;15672:15672&amp;quot;  # here, we can access rabbitmq management plugin

worker:
  build: ./python
  environment:
    - C_FORCE_ROOT=1 # Root is not allowed to use celery by default
  command: celery worker -A projects.celery -n default@%h --loglevel=debug
  volumes:
    - ./mycode:/code # worker and django app shares same code
  links:
    - db
    - rabbitmq

web:
  build: ./python
  environment:
    - DJANGO_SETTINGS_MODULE=my_config #specify setting file to use
  volumes:
    - ./mycode:/code # mount my code to /code in container
    - /var/log/django:/var/log/django
  command: python manage.py runserver 0.0.0.0:8000
  ports:
    - &amp;quot;8000:8000&amp;quot;
  links:
    - db
    - rabbitmq
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN apt-get update;apt-get install -y mysql-client gettext vim
RUN mkdir /code
RUN mkdir /var/log/django
WORKDIR /code
ADD ./myocde/requirements.txt /code/
RUN pip install -r requirements.txt
RUN pip install ipython
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-two-sites:e7d43dfc46b4cac080bf58b0a0e5c283&#34;&gt;start two sites&lt;/h3&gt;

&lt;p&gt;Sometimes I need to test my site with different config file. So I made a copy of the docker-compose.yml, and name it site2.yml. Then in site2.yml,
I change the port mapping of web to other ports, eg. 1234:1234.&lt;/p&gt;

&lt;p&gt;Then with &lt;code&gt;docker-compose -f site2.yml run --serive-ports python manage.py 0.0.0.0:1234&lt;/code&gt;, I can start another site with port 1234.
Note that the &amp;ndash;service-ports option  makes the port mapping of web available in started container.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some project notes: Use React and webpack</title>
      <link>http://wgundamj44.github.io/post/2015-08-12-project-note/</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-08-12-project-note/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been doing my current project for two months, and I feel it is time for some notes.&lt;/p&gt;

&lt;h2 id=&#34;try-out-react-in-frontend:b1745fd124132e9667744292102bd3ba&#34;&gt;Try out react in frontend&lt;/h2&gt;

&lt;p&gt;The original front end is django template + jQuery + bootstrap. Without any framework to manage the code structure, there were nearly no reusable UI components. We had to implement every page from scratch. More importantly, without certain patterns, the implementations of front end logic differed greatly from one another even for similar logics.&lt;/p&gt;

&lt;p&gt;The project is a business management site, the pages are mainly the CRUD of different business objects, eg. a list for all the objects, a modal dialog for detail of an object, a modal for update or create object, a modal for delete confirm. It&amp;rsquo;s clear that UI elements can be reused somehow. For example, the boostrap modal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;modal fade&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
        &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
        &amp;lt;h4 class=&amp;quot;modal-title&amp;quot;&amp;gt;Modal title&amp;lt;/h4&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;One fine body&amp;amp;hellip;&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
        &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default&amp;quot; data-dismiss=&amp;quot;modal&amp;quot;&amp;gt;Close&amp;lt;/button&amp;gt;
        &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Save changes&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-content --&amp;gt;
  &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-dialog --&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;!-- /.modal --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This structure is common among all objects, the difference is the title, the content and footer. The old way will be copy this structure, then write the contents in title, content and footer. Consider after copied this structure for near a hundred times, then one day we need to add a new css class in every modal&amp;hellip; What a desperate work.. How about we write only one copy of this structure and generate the contents dynamicaly. With react, this is a very trival work.&lt;/p&gt;

&lt;p&gt;Another problem is that, as UI elements get more and more complex, the relation between elements will be hard to manage. For example, when radio button A is checked, textinput B should appear, button C should hide, button D should appear&amp;hellip; And when button A lost its check, we should perform the reverse actions. This will get tedious and hard to understand.&lt;/p&gt;

&lt;h4 id=&#34;data-binding:b1745fd124132e9667744292102bd3ba&#34;&gt;data binding&lt;/h4&gt;

&lt;p&gt;To solve this problem, I think first we need to use data to drive the UI, instead of considering the relationship between UI elements. For the example above, bind radio A to a variable, then make related UI listen for state of variable and make change themselves. If one day, we deside to add new UI when A is checked, just make this UI listen for vairable, saving us the trouble of modifying the listeners of A. This way we removed the complex relations between UIs, as all the UIs are now bind to data. For our project, we use state of react components to hold the data, and update the underlying UI accordingly. We won&amp;rsquo;t care which children will get changed when state changes, the children is responsible for themselves.&lt;/p&gt;

&lt;h4 id=&#34;components:b1745fd124132e9667744292102bd3ba&#34;&gt;components&lt;/h4&gt;

&lt;p&gt;Another thing I learned is that, when updatin UI, prefer function call to update DOM directly. For example, when click &amp;lsquo;Detail&amp;rsquo; button, we load some data and show a modal with the data displayed. A naive way is to use lots of &lt;code&gt;$(xxx).value(yyy)&lt;/code&gt; or &lt;code&gt;$(xxx).find(xxx).prop(&#39;checked&#39;, true)&lt;/code&gt; to update DOM. As we can see, this is not easy to understand at application level. A prefer way is, we create a class that represents the modal for detail. Then, we pass this class the data, and say:&amp;ldquo;Hey, update your self&amp;rdquo;. Although under the hood of this class, it does the same ugly things as the first approach, the application itself gets a lot cleaner, and the change of UI in modal won&amp;rsquo;t break the application. With react, this get done natrually by passing properties to child component.&lt;/p&gt;

&lt;p&gt;After used react, our modal looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;React.createClass({
  render: function() {
    return (
      &amp;lt;div class=&amp;quot;modal fade&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
	  &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
	    &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
              &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;&amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
              &amp;lt;h4 class=&amp;quot;modal-title&amp;quot;&amp;gt;{this.props.title}&amp;lt;/h4&amp;gt;
	    &amp;lt;/div&amp;gt;
	    &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
	      &amp;lt;ChildContent data={this.state.data} /&amp;gt;
	    &amp;lt;/div&amp;gt;
	    &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
              &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default&amp;quot; data-dismiss=&amp;quot;modal&amp;quot;&amp;gt;Close&amp;lt;/button&amp;gt;
              &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot; onClick={this.handleSubmit}&amp;gt;Save changes&amp;lt;/button&amp;gt;
	    &amp;lt;/div&amp;gt;
	  &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-content --&amp;gt;
	&amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-dialog --&amp;gt;
      &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal --&amp;gt;
    )
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just pass data to child, and child will make the view done according to specific needs.&lt;/p&gt;

&lt;h3 id=&#34;some-cavets-when-using-react:b1745fd124132e9667744292102bd3ba&#34;&gt;some cavets when using react&lt;/h3&gt;

&lt;h4 id=&#34;how-to-coexist-with-bootstrap-modal:b1745fd124132e9667744292102bd3ba&#34;&gt;How to coexist with bootstrap-modal&lt;/h4&gt;

&lt;p&gt;Our project use bootstrap-modal, which comes with a ModalManager, so that modal can be stackable. But when doing this, it moves the modals away from original position and attach them to document. If we use react to generate modal, when it is shown, the react will fail with &lt;code&gt;Invariant Violation: findComponentRoot(..., .0.1.0): Unable to find element. This probably means the DOM was unexpectedly mutated.&lt;/code&gt; It turns out that, outer program should not manipulate the DOM of react component directly. After some search, people say that, it doesn&amp;rsquo;t matter if parents of react component is moved around. So instead of generating the whold modal with react, we first write &lt;code&gt;&amp;lt;div class=&amp;quot;modal&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; part with plain html, then we use react to generate &lt;code&gt;&amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;part, and mount it into modal. With this approach, the error of react gone away.&lt;/p&gt;

&lt;h4 id=&#34;key-and-generated-list:b1745fd124132e9667744292102bd3ba&#34;&gt;key and generated list&lt;/h4&gt;

&lt;p&gt;In react &lt;a href=&#34;https://facebook.github.io/react/docs/multiple-components.html#dynamic-children&#34;&gt;document&lt;/a&gt;, it is said that &lt;code&gt;key&lt;/code&gt; is needed to determine the child should be reused or destoryed. I didn&amp;rsquo;t quite understand it until I ran into some wierd problem. My UI is a list of input representing a list of data eg. [a, b,c ,d]. We can delete a row, or add a new row.
The werid part is that, when I delete the row with value c, the resulting list in UI will be [a, b, c] which is wrong, but the data of the state is correct with data [a, b, d]. That is always the last UI element gets deleted. When I look at the row, each row is with something like &lt;code&gt;data-reactid=&amp;quot;.0.0.1.0.0.2.0&amp;quot;&lt;/code&gt;,  the last digit in the id is key(maybe..). It seems that if we don&amp;rsquo;t allocate key, react will simple allocate 1, 2, 3, 4  as keys. When we delete c, the state changes so the UI repaints, again key 1, 2, 3 is allocated for remaining elements. React compares key, and think that element with 1, 2, 3 is unchanged and they are reused, only element with key 4 is removed. As the result, c remained while d went away. So I tried to allocate brand new keys for each state change, eg. [1, 2, 3, 4], then [5, 6, 7, 8]. So that there were no duplicate keys between state change. Then the id will looks like &lt;code&gt;data-reactid=&amp;quot;.0.0.1.0.0.2.$1&lt;/code&gt;, where $1 seems the key 1. And this solves the problem. But actually, it is a big waste as all the UI elements got repainted event they didn&amp;rsquo;t change.&lt;/p&gt;

&lt;h3 id=&#34;todo-automate-babel-with-webpack:b1745fd124132e9667744292102bd3ba&#34;&gt;TODO: automate babel with webpack&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on django</title>
      <link>http://wgundamj44.github.io/post/2015-08-04-memo-on-django/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-08-04-memo-on-django/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been using Django in my projects. Here are some notes and pitfalls.&lt;/p&gt;

&lt;h3 id=&#34;how-to-use-i18n-with-javascript:de035a89148bb9c23379c3d4e290fd8b&#34;&gt;How to use i18n with javascript&lt;/h3&gt;

&lt;p&gt;django&amp;rsquo; s translation also works for javascript. To make the .mo files available to js,
we need to add some url rules, and also add that path to html files that needs loading translation files.&lt;/p&gt;

&lt;p&gt;The only thing needs attention is that, when making translation files for js, we need to give &lt;code&gt;makemessages&lt;/code&gt; a
&lt;code&gt;-d djangojs&lt;/code&gt; option, otherwise it won&amp;rsquo;t work. The generated file is with name djangojs.po compared to the normal name django.po.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;js_info_dict&lt;/code&gt; that is passed to &lt;code&gt;javascript_catalog&lt;/code&gt;, we need to specify the domain as &lt;code&gt;djangojs&lt;/code&gt;. It we specified &lt;code&gt;django&lt;/code&gt; as
domain, then po files of python and templates will be loaded, which may not be what we want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How much memory does PHP array take?</title>
      <link>http://wgundamj44.github.io/post/2014-05-01-php-memory/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2014-05-01-php-memory/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve read an interesting article talking about how much memory does PHP array take.
Here is the summary.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                             |  64 bit   | 32 bit
---------------------------------------------------
zval                         |  24 bytes | 16 bytes
+ cyclic GC info             |   8 bytes |  4 bytes
+ allocation header          |  16 bytes |  8 bytes
===================================================
zval (value) total           |  48 bytes | 28 bytes
===================================================
bucket                       |  72 bytes | 36 bytes
+ allocation header          |  16 bytes |  8 bytes
+ pointer                    |   8 bytes |  4 bytes
===================================================
bucket (array element) total |  96 bytes | 48 bytes
===================================================
total total                  | 144 bytes | 76 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the details of each components:&lt;/p&gt;

&lt;h3 id=&#34;zval:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;zval&lt;/h3&gt;

&lt;p&gt;zval is the internal representation of PHP variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct _zval_struct {
    zvalue_value value;     // The value
    zend_uint refcount__gc; // The number of references to this value (for GC)
    zend_uchar type;        // The type
    zend_uchar is_ref__gc;  // Whether this value is a reference (&amp;amp;)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and zvalue_value looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef union _zvalue_value {
    long lval;                // For integers and booleans
    double dval;              // For floats (doubles)
    struct {                  // For strings
        char *val;            //     consisting of the string itself
        int len;              //     and its length
    } str;
    HashTable *ht;            // For arrays (hash tables)
    zend_object_value obj;    // For objects
} zvalue_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The size of zvalue_value is the max of each member, which is str member that takes 12 bytes. Take padding into account, it gives us 16 bytes. So the sum of zval will be 16 + 4 + 1 + 1, which is 22 bytes and padded to 24 bytes in total.&lt;/p&gt;

&lt;h3 id=&#34;cyclic-gc-info:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;cyclic GC info&lt;/h3&gt;

&lt;p&gt;Starts at PHP5.3, it introduced garbage collector for cyclic reference. So it wraps zval into this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _zval_gc_info {
    zval z;
    union {
        gc_root_buffer       *buffered;
        struct _zval_gc_info *next;
    } u;
} zval_gc_info;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the sum will be 24 + 8 = 32 bytes.&lt;/p&gt;

&lt;h3 id=&#34;allocation-header:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;allocation header&lt;/h3&gt;

&lt;p&gt;Here is the unexpected part: In order to keep track of allocated memories, PHP add allocation header to every allocation done throught it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _zend_mm_block {
    zend_mm_block_info info;
#if ZEND_DEBUG
    unsigned int magic;
# ifdef ZTS
    THREAD_T thread_id;
# endif
    zend_mm_debug_info debug;
#elif ZEND_MM_HEAP_PROTECTION
    zend_mm_debug_info debug;
#endif
} zend_mm_block;

typedef struct _zend_mm_block_info {
#if ZEND_MM_COOKIES
    size_t _cookie;
#endif
    size_t _size; // size of the allocation
    size_t _prev; // previous block (not sure what exactly this is)
} zend_mm_block_info;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can&amp;rsquo;t understand above well, but when all the options turned off, the size of above structure is 16 bytes.
Now we get 48 bytes for each varibale.&lt;/p&gt;

&lt;h3 id=&#34;buckets:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;Buckets&lt;/h3&gt;

&lt;p&gt;As we know, the Array in PHP is in fact Hash table. Every element is in a bucket. The bucket is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct bucket {
    ulong h;                  // The hash (or for int keys the key)
    uint nKeyLength;          // The length of the key (for string keys)
    void *pData;              // The actual data
    void *pDataPtr;           // ??? What&#39;s this ???
    struct bucket *pListNext; // PHP arrays are ordered. This gives the next element in that order
    struct bucket *pListLast; // and this gives the previous element
    struct bucket *pNext;     // The next element in this (doubly) linked list
    struct bucket *pLast;     // The previous element in this (doubly) linked list
    const char *arKey;        // The key (for string keys)
} Bucket;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The size of above structure is 68 bytes, padding to 72 bytes. Every bucket itself is dynamically allocated, adding addtional 16 bytes from allocation header, sums up to 88 bytes. Also, the pointer to each buckets cost 8 bytes, so the final results is 96 bytes.&lt;/p&gt;

&lt;p&gt;Here we come at the results that: each element in array costs: 96 bytes for bucket and 48 bytes for zval = 144 bytes total.
10000 element array will costs: 13.73MB.&lt;/p&gt;

&lt;h3 id=&#34;array-size-allocation:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;Array size allocation&lt;/h3&gt;

&lt;p&gt;Like vector in STL, size of contailer is not increased one by one. Instead, when size reaches pre-allocated limit, 2 times of the existing memory will allocated. As a result, the actual array size will be larger than the sum of its elements.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:0ffd47b925e5a07089257c9f74df4eff&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;PHP is the BEST language. HAHA..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A try on docker</title>
      <link>http://wgundamj44.github.io/post/2015-01-15-try-on-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-01-15-try-on-docker/</guid>
      <description>

&lt;p&gt;Recently(Last year..) I tried docker a little bit. My Goal was to create my deveopment enviroment of MEAN.js.&lt;/p&gt;

&lt;h1 id=&#34;failure:8d145bb3828fd33a2b211fa2e911eb8b&#34;&gt;Failure..&lt;/h1&gt;

&lt;p&gt;At first I installed docker on my CentOS 6.5, and miserably failed. It kept telling me that my linux kernal version is not right,
althoug i&amp;rsquo;ve already updated it to latest version.&lt;/p&gt;

&lt;p&gt;So I had to install a new VM with CentOS 7.0&lt;/p&gt;

&lt;h1 id=&#34;pull-the-images:8d145bb3828fd33a2b211fa2e911eb8b&#34;&gt;Pull the images&lt;/h1&gt;

&lt;p&gt;Here is what I need: An Image with nodejs and an Image with MongoDB. I downloaded them from offical repository so there&amp;rsquo;s nothing to say.&lt;/p&gt;

&lt;h1 id=&#34;configuration:8d145bb3828fd33a2b211fa2e911eb8b&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;This is the key part.&lt;/p&gt;

&lt;p&gt;First, I need to share the source code between host and docker host. I found that -v option can specify folder sharing.&lt;/p&gt;

&lt;p&gt;Second, I don&amp;rsquo;t what the data of mongo be left inside docker host. Again, -v can make /data/db of mongo be a folder in real host.&lt;/p&gt;

&lt;p&gt;Third, the docker process of nodejs should be able to see mongo process. &amp;ndash;link can solve this. To use link, docker of mongo should have a name first.&lt;/p&gt;

&lt;p&gt;Forth, in MEAN.js, it defaults to access localhost for mongo, which doesn&amp;rsquo;t exist here. So I need to modify it so that it accepts DB_HOST enviroment variable as its mongo host, and &amp;ndash;env option of docker can set evrioment variables.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:8d145bb3828fd33a2b211fa2e911eb8b&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The above consideratin sums up to be the commands as follows:&lt;/p&gt;

&lt;p&gt;To start mongodb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it -d -p 27017:27017 -v /develop/mongo_data/:/data/db --name mongodb dockerfile/mongodb mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start mean.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8081:8081 -v /develop/node/testProject/:/home/meanjs --link mongodb:mongo --name meanjs --env DB_HOST=mongo dockerfile/meanjs forever -w server.js
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About Grep Escape</title>
      <link>http://wgundamj44.github.io/post/2014-10-08-grep-escape/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2014-10-08-grep-escape/</guid>
      <description>&lt;p&gt;What&amp;rsquo;s the difference with &lt;code&gt;grep &#39;$id\$&#39;&lt;/code&gt; and &lt;code&gt;grep \$id\$&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The first will match string $id$, and the second will match the string ends with $id.&lt;/p&gt;

&lt;p&gt;It turns out that, there&amp;rsquo;re two level of escape here.&lt;/p&gt;

&lt;p&gt;The first is shell quote, as &lt;code&gt;\&lt;/code&gt; is also special characters in shell,&lt;br /&gt;
it will be interprated as an escapce character, and turns &lt;code&gt;\$&lt;/code&gt; into $ &lt;em&gt;BEFORE&lt;/em&gt; it is sent to grep,
so grep will actually get $id$ as input.&lt;br /&gt;
To it hehaves as we intended, we should use double slash &lt;code&gt;\\&lt;/code&gt;, shell will remove the first slash, and send the
second to grep.&lt;br /&gt;
To simplify things, use single quote is better choise, &lt;code&gt;&#39;$id$&#39;&lt;/code&gt; will tell shell that &lt;code&gt;$id$&lt;/code&gt; should be treated
as raw string.&lt;/p&gt;

&lt;p&gt;The second is escape of grep itself. $ is special only if it resides in the end of string. So the first $ will be interprated
literally, the second should be escaped. To make grep treat input as fixed string, -F option is a better choice.&lt;/p&gt;

&lt;p&gt;All the above considerations sum up, we get the final command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grep -F &#39;$id$&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About flycheck</title>
      <link>http://wgundamj44.github.io/post/2014-11-17-flycheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2014-11-17-flycheck/</guid>
      <description>

&lt;p&gt;Recently I replaced my emacs on-the-fly syntax checker from flymake to flycheck. Flycheck is more well designed so that additional checker can be used without
introducing into the other plugins.&lt;/p&gt;

&lt;p&gt;For PHP development, I used to use php + phpcs, php for syntax check, phpcs for unused variable check. With flymake, it can only use php by default, and need to
install flymake-php etc. for phpcs. While in flycheck, there&amp;rsquo;s a mechanism called &amp;lsquo;next checker&amp;rsquo;, in which additional checker can be defined.&lt;/p&gt;

&lt;p&gt;After flycheck is installed, php checker works fine while phpcs does not. So I digged a little further into the source code of flycheck, and found out the reason.
It turns out that, flycheck will save a copy of the source code to be checked to a tmp folder. In my Mac computer, it is /var/xxx/yyy. This folder is in fact a symbol link
to /private/var/xxx/yyy/. The output of phpcs use directory name /private/var/xxx, while flycheck assumed the directory name /var/xxx. The flycheck will use &lt;code&gt;string=&lt;/code&gt; tocheck if the origin of
the error message is the same as the checked file, the file name is obviously different although they refer to the same place.. As a result, the error message will be discarded and no check result will be output.
My solution is customized the &lt;code&gt;temporary-file-directory&lt;/code&gt; variable to refer to the real directory name instead of the symbol link, and everything works fine. Also, I customized the &lt;code&gt;flycheck-phpcs-standard&lt;/code&gt; to
specify the standard of phpcs, and &lt;code&gt;flycheck-php-phpcs-executable&lt;/code&gt; to specify the phpcs command path.&lt;/p&gt;

&lt;h2 id=&#34;how-flycheck-works:4fb8eda8f02c022ebaaa118fd7ec67cb&#34;&gt;How flycheck works?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;php checker&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;flycheck-define-checker php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says use php to check for error, and after error check is performed check for warnings use phpmd and phpcs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;phpcs checker&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;flycheck-define-checker php-phpcs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This says that use &lt;code&gt;flycheck-phpcs-standard&lt;/code&gt; to check for warnings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;workflow&lt;/li&gt;
&lt;li&gt;flycheck-buffer: checker entry point&lt;/li&gt;
&lt;li&gt;flycheck-start-checker: start a checker

&lt;ul&gt;
&lt;li&gt;flycheck-checker-executable: extract checker command from checker config&lt;/li&gt;
&lt;li&gt;flycheck-checker-substitued-arguments: determine the arguments from checker config, also creates temp file for check&lt;/li&gt;
&lt;li&gt;flycheck-receive-checker-ouput: collects output of checker&lt;/li&gt;
&lt;li&gt;flycheck-handle-signal: deal with output when process finished with some signal&lt;/li&gt;
&lt;li&gt;flycheck-finish-syntax-check: finish the check

&lt;ul&gt;
&lt;li&gt;flycheck-relevant-errors: check if error message belong the current buffer&lt;/li&gt;
&lt;li&gt;flycheck-process-error-functions: actually change the buffer display with error messages&lt;/li&gt;
&lt;li&gt;next checker: if there&amp;rsquo;s next checker for the buffer, repeat&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>An analysis of GvG event</title>
      <link>http://wgundamj44.github.io/post/2014-11-12-gvg-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2014-11-12-gvg-status/</guid>
      <description>

&lt;h2 id=&#34;summary-of-gvg-event:afe463e62ffac07f8589ee0e884ac16f&#34;&gt;Summary of GvG event&lt;/h2&gt;

&lt;p&gt;A kind of Guild VS Guild event.&lt;/p&gt;

&lt;p&gt;Last period 2014-10-09 ~ 2014-10-16. 12:00:00 ~ 12:59:59, 22:00:00 ~ 22:59:59 twice everyday.&lt;/p&gt;

&lt;p&gt;Average access user is about 4000. Access is concentrated in one hour, so the load was heavy.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;re 4 web servers to handle the access, DB is one master, one slave.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a serious bug in the initial versions so the load average is crazily high. In about 10-12, we fixed the bugs so
the performace after 10-12 is more reiable.&lt;/p&gt;

&lt;h2 id=&#34;the-bug:afe463e62ffac07f8589ee0e884ac16f&#34;&gt;The bug&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;SELECT last_insert_id()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;VS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT last_insert_id() FROM xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The former will return the id of last inserted record, while the latter will return last inserted id for EVERY RECORD in the table, which
blowed up our application.&lt;/p&gt;

&lt;h2 id=&#34;before:afe463e62ffac07f8589ee0e884ac16f&#34;&gt;Before&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;number of access per sec:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-access1.png&#34; alt=&#34;number of access&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;response time:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-time1.png&#34; alt=&#34;response time&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cpu load average:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-load1.png&#34; alt=&#34;load average&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Response slows as requests increase. Also we can see that, because of the slow query the cpu load reaches as high as 5 at peak time.&lt;/p&gt;

&lt;h2 id=&#34;after-fix:afe463e62ffac07f8589ee0e884ac16f&#34;&gt;After fix&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;number of access per sec:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-access2.png&#34; alt=&#34;number of access&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;response time:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-time2.png&#34; alt=&#34;response time&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cpu load average:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://wgundamj44.github.io/2014-11-12-load2.png&#34; alt=&#34;load average&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the bug is fixed, the load average returns to a reasonable level.&lt;/p&gt;

&lt;h2 id=&#34;some-addtional-figures:afe463e62ffac07f8589ee0e884ac16f&#34;&gt;Some Addtional Figures&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;QPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At peak time, the master has qps of about 3k, among the operations, select operation consists 60% which is about 2k qps, while
update and insert is 300 and 500 respectively.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response Time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;0 ~ 100ms is mostly access time of static files. 100 ~ 200ms is considered as &amp;ldquo;Good&amp;rdquo; response time. When response time reaches 200ms or more, the request should be especially pay attention to, because they will surely kill the game if come to frequently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development Enviroment with Vagrant</title>
      <link>http://wgundamj44.github.io/post/2014-09-27-dev-with-vagrant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2014-09-27-dev-with-vagrant/</guid>
      <description>

&lt;h1 id=&#34;goal:ac1b67bb1caef5475448797abf87331d&#34;&gt;Goal&lt;/h1&gt;

&lt;p&gt;Migerate my development enrioment to vagrant managed virtual box.&lt;/p&gt;

&lt;h1 id=&#34;vagrant:ac1b67bb1caef5475448797abf87331d&#34;&gt;vagrant&lt;/h1&gt;

&lt;h2 id=&#34;nfs:ac1b67bb1caef5475448797abf87331d&#34;&gt;nfs&lt;/h2&gt;

&lt;p&gt;It is said that common shared folder will be very slow. I decided to use NFS although I didn&amp;rsquo;t measure the difference myself&amp;hellip;&lt;/p&gt;

&lt;p&gt;I followed the instructions &lt;a href=&#34;https://docs.vagrantup.com/v2/synced-folders/nfs.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Put it simply, we need to do two things: set private networks, set share folder as nfs. Configure file is as belows:
{% highlight ruby %}&lt;/p&gt;

&lt;h1 id=&#34;set-network-as-dhcp:ac1b67bb1caef5475448797abf87331d&#34;&gt;set network as dhcp&lt;/h1&gt;

&lt;p&gt;config.vm.network &amp;ldquo;private_network&amp;rdquo;, type: &amp;ldquo;dhcp&amp;rdquo;&lt;/p&gt;

&lt;h1 id=&#34;set-shared-folder-and-make-type-nfs:ac1b67bb1caef5475448797abf87331d&#34;&gt;set shared folder, and make type nfs&lt;/h1&gt;

&lt;p&gt;config.vm.synced_folder &amp;ldquo;../Develop/&amp;rdquo;, &amp;ldquo;/develop&amp;rdquo;, type: &amp;ldquo;nfs&amp;rdquo;
{% endhighlight %}
The bad thing is that, after nfs is set, we will be prompted with password everytime. Vagrant document gives the way to avoid this.&lt;/p&gt;

&lt;h2 id=&#34;port-forwarding:ac1b67bb1caef5475448797abf87331d&#34;&gt;port forwarding&lt;/h2&gt;

&lt;p&gt;{% highlight ruby %}
config.vm.network &amp;ldquo;forwarded_port&amp;rdquo;, guest: 8080, host: 1234
config.vm.network &amp;ldquo;forwarded_port&amp;rdquo;, guest: 8081, host: 1235
{% endhighlight %}
The good part of vagrant is that, when port conficts it will explictly complains which is far better than virutal box.&lt;/p&gt;

&lt;h2 id=&#34;provisioning:ac1b67bb1caef5475448797abf87331d&#34;&gt;provisioning&lt;/h2&gt;

&lt;p&gt;Have&amp;rsquo;t investigate this yet..&lt;/p&gt;

&lt;h1 id=&#34;struggle-for-install:ac1b67bb1caef5475448797abf87331d&#34;&gt;struggle for install&lt;/h1&gt;

&lt;h2 id=&#34;install-recent-repository:ac1b67bb1caef5475448797abf87331d&#34;&gt;install recent repository&lt;/h2&gt;

&lt;p&gt;use this command:
    rpm -Uvh &lt;a href=&#34;http://mirror.webtatic.com/yum/el6/latest.rpm&#34;&gt;http://mirror.webtatic.com/yum/el6/latest.rpm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;update-php-version-from-5-3-to-5-4:ac1b67bb1caef5475448797abf87331d&#34;&gt;update php version from 5.3 to 5.4&lt;/h2&gt;

&lt;p&gt;somehow the default php version in CentOS6 is 5.3, which doesn&amp;rsquo;t accomendate my project. So I need to update php version with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install yum-plugin-replace
yum replace php-common --replace-with=php54w-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a result, this step brings lots of unexpected problems.&lt;/p&gt;

&lt;h2 id=&#34;install-gcc-apache-mysql:ac1b67bb1caef5475448797abf87331d&#34;&gt;install gcc, apache, mysql&lt;/h2&gt;

&lt;h2 id=&#34;install-redis-and-memcached:ac1b67bb1caef5475448797abf87331d&#34;&gt;install redis and memcached&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;yum install redis memcached
yum install php54w-memcache (not php-memcache!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when I tried to install php54w-redis, I found out that there was no such package. So I had to install it from source code phpredis&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;start-my-project:ac1b67bb1caef5475448797abf87331d&#34;&gt;start my project&lt;/h2&gt;

&lt;p&gt;I encountered following problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;white page: My project is based on CodeIgniter. The werid part of the framework is that, its hides all the error message when doing mysql connect with @.
As a result, it took me lots of time to find out that reason is simply mysql server didn&amp;rsquo;t started.&lt;/li&gt;
&lt;li&gt;no error log: it turns out the apache didn&amp;rsquo;t have the write permission to the log folder&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Memo about HTTP service in python</title>
      <link>http://wgundamj44.github.io/post/2015-05-21-http-service-in-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-05-21-http-service-in-python/</guid>
      <description>

&lt;h2 id=&#34;general-idea-of-wsgi:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;General idea of WSGI&lt;/h2&gt;

&lt;p&gt;As specified by pep-0333, the WSGI aims to make application written in python run on any web server as long as they follow the WSGI.&lt;/p&gt;

&lt;p&gt;It includes two parts:&lt;/p&gt;

&lt;h4 id=&#34;the-application-framework-side:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;The Application/Framework Side&lt;/h4&gt;

&lt;p&gt;The application object should be callable(a function, a class with &lt;strong&gt;call&lt;/strong&gt; ..), and accepts two arguments. Like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def simple_app(environ, start_response):
    &amp;quot;&amp;quot;&amp;quot;Simplest possible application object&amp;quot;&amp;quot;&amp;quot;
    status = &#39;200 OK&#39;
    response_headers = [(&#39;Content-type&#39;, &#39;text/plain&#39;)]
    start_response(status, response_headers)
    return [&#39;Hello world!\n&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-server-gateway-side:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;The Server/Gateway Side&lt;/h4&gt;

&lt;p&gt;The server will invoke the app for each request. For example, in werkzeug&amp;rsquo;s BaseWSGIServer, it invokes app with &lt;code&gt;app(environ, start_response)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;werkzeug:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;werkzeug&lt;/h2&gt;

&lt;h3 id=&#34;run-simple-make-a-simple-http-server:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;run_simple: make a simple HTTP server&lt;/h3&gt;

&lt;p&gt;The interesting part is it supports restart on code change. The mechanism is that, when script executes,
it starts a new process that executes a new process running the same script, but add a new envrioment variable
&lt;code&gt;WERKZEUG_RUN_MAIN&lt;/code&gt;, so that a process can tell if it is running in forked process or original process, and executes
different logic accordingly.&lt;/p&gt;

&lt;p&gt;The main process is a while(1) loop, it forks a subprocess, waits until it terminates, checks its status code. If the code is 3,
it knows code has changed and forks subprocess again, so that server is restarted. If code is not 3, then some error may happended,
the main process itself will terminates.&lt;/p&gt;

&lt;p&gt;In subprocess, it just starts a new thread which
runs the server instance, and then runs the reloader. In reloader, it use watchdog to detect file add/remove/modification infinitely, if
any change happens, it breaks from loop and subprocess terminates with status code 3. Notice that, the server thread is started with daemon
options on, so when parent process terminates, the thread terminates too.&lt;/p&gt;

&lt;h3 id=&#34;basewsgiserver-and-wsgirequesthandler:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;BaseWSGIServer and WSGIRequestHandler&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BaseWSGIServer&lt;/code&gt; inherits Python&amp;rsquo;s &lt;code&gt;HTTPServer&lt;/code&gt;. It sets its &lt;code&gt;handler&lt;/code&gt; to &lt;code&gt;WSGIRequestHandler&lt;/code&gt; which will handle request. For each request, this &lt;code&gt;WSGIRequestHandler&lt;/code&gt; will be initialized, and handles request.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;WSGIRequestHandler&lt;/code&gt;&amp;rsquo;s base class BaseRequestHandler, we can see in its contructor, it calls step(), handle(), finish() in turn. All its child class
will override handle() to give response.&lt;/p&gt;

&lt;p&gt;In WSGIRequestHandler&amp;rsquo;s parent class BaseHTTPRequestHandler, it overrides handle() and call handle_one_request() for each request came. And WSGIRequestHandler
overrides handle_one_request() which finally calls run_wsgi(). And in run_wsgi, the app which is the server logic written by user is called with
&lt;code&gt;app(envrion, start_response)&lt;/code&gt;. envrion is envrioment variables from request. start_response is a function returns write method. write method is where response data
is actually get written. &lt;code&gt;start_response&lt;/code&gt; just set the response_headers and status, and return a function which will finally write response into socket.&lt;/p&gt;

&lt;p&gt;So where does this envrion come from? In WSGIRequestHandler there&amp;rsquo;s a make_environ method that copies the header info from request into envrion.&lt;/p&gt;

&lt;h3 id=&#34;routing:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;routing&lt;/h3&gt;

&lt;p&gt;Routing is implemented with werkzeug.routing. As a general view, routing can be used as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m = Map([Rule(&#39;/&#39;, endpoint=&#39;hello&#39;)], default_subdomain=&#39;www&#39;)
m.add(Subdomain(&#39;kb&#39;,[Rule(&#39;/&#39;, endpoint=&#39;hello2&#39;)])
m.add(route.Subdomain(&#39;kb&#39;,[Rule(&#39;/test&#39;, endpoint=&#39;hello2.test&#39;)]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the Map object has the internal data like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Map([&amp;lt;Rule &#39;kb|/test&#39; -&amp;gt; hello2.test&amp;gt;,
 &amp;lt;Rule &#39;www|/&#39; -&amp;gt; hello&amp;gt;,
 &amp;lt;Rule &#39;kb|/&#39; -&amp;gt; hello2&amp;gt;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rule reprents a single mapping rule, it becomes usefule after being &lt;code&gt;bind&lt;/code&gt; to a map. In bind method,
the regex pattern will be generated. For example, a rule &lt;code&gt;r = Rule(&#39;/add&#39;, endpoint=&#39;doAdd&#39;)&lt;/code&gt; after bind to m,
&lt;code&gt;print(r._regex.pattern)&lt;/code&gt; has the result &lt;code&gt;^www\|\/add$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Map should be bind to a host name with &lt;code&gt;ad = m.bind(&#39;example.com&#39;)&lt;/code&gt;, which returns a MapAdapter. MapAdapter is in charge
for URL matching. Note that for the above &lt;code&gt;ad&lt;/code&gt; object, it only matches url with subdomain &lt;code&gt;www&lt;/code&gt;. To match url with subdomain
&lt;code&gt;kb&lt;/code&gt;, it should be bind with &lt;code&gt;m.bind(&#39;example.com&#39;, subdomain=&#39;kb&#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The url dispatch is also done by MapAdapter, with &lt;code&gt;dispatch&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;flask:c91300f1028a116a3aac58b5c1f5d299&#34;&gt;flask&lt;/h2&gt;

&lt;p&gt;flask looks like a showbox of how to use werkzeug. For a code snippet like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/say/&amp;lt;name&amp;gt;&amp;quot;)
def say(name):
    return &amp;quot;hello %s&amp;quot; % name


if __name__ == &#39;__main__&#39;:
    app.run(host=&amp;quot;localhost&amp;quot;, port=5000, debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@app.route will register a routing entry, with werkzeug&amp;rsquo;s Routing module. For the above example, it will route &lt;code&gt;&#39;/say/xxx&#39;&lt;/code&gt; url to &lt;code&gt;say(name)&lt;/code&gt; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NULL or NOT NULL</title>
      <link>http://wgundamj44.github.io/post/2015-2-26-mysql-null/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-2-26-mysql-null/</guid>
      <description>&lt;p&gt;In mysql table definiations, how NULL and NOT NULL effects behavior?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AFTER&lt;/strong&gt; MySQL 5.0.2. If there&amp;rsquo;s no NOT NULL in the column defination, MySQL add a DEFAULT NULL to defination. If there&amp;rsquo;s NOT NULL in the defination, in strict mode, an insertion that lacks the column will raise an error, while implict default value will be inserted in non-strict mode.&lt;/p&gt;

&lt;p&gt;So for portability, always add DEFAULT for NOT NULL column.&lt;/p&gt;

&lt;p&gt;Detail can be found &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/data-type-defaults.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>