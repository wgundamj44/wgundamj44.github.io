<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cocos2d on Notes of wgundamj44</title>
    <link>http://wgundamj44.github.io/tags/cocos2d/</link>
    <description>Recent content in Cocos2d on Notes of wgundamj44</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://wgundamj44.github.io/tags/cocos2d/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Workflow of AvatarDrive&#39;s native code (Android)</title>
      <link>http://wgundamj44.github.io/post/2015-01-20-AvatarDrive-native-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://wgundamj44.github.io/post/2015-01-20-AvatarDrive-native-workflow/</guid>
      <description>

&lt;p&gt;Some note of my invistigation into AvatarDrive&amp;rsquo;s source code.&lt;/p&gt;

&lt;h3 id=&#34;startactivity:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;StartActivity&lt;/h3&gt;

&lt;p&gt;This is where all the story starts. It does nothing, but invoke webview Activity.&lt;/p&gt;

&lt;h3 id=&#34;mainwebviewactivity:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;MainWebViewActivity&lt;/h3&gt;

&lt;p&gt;As as hybrid game, most of the UI interaction happens in this webview activity.
When user is about to redirect to native battle logic, the this view intercepts cirtain URL with &lt;code&gt;shouldOverrideUrlLoading&lt;/code&gt;, and native logic will take controll.
QuestBattleActivity will lanuch.&lt;/p&gt;

&lt;h3 id=&#34;questbattleactivity-cocos2dactivity-cocos2drender:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;QuestBattleActivity, Cocos2dActivity, Cocos2dRender&lt;/h3&gt;

&lt;p&gt;This is a subclass of Cocos2dActivity. Here we parse the intent passed in from webview, and put all the neccesary data for battle.
In onCreate, all the data neccesary for game start will be set, and loading effect starts to run. In onCreateView, Cocos2dRender is initialized and attached to activity. Now that render thread has started, in onSurfaceCreated method, native method nativeInit is called.&lt;/p&gt;

&lt;h3 id=&#34;jni-main-cpp:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;jni/main.cpp&lt;/h3&gt;

&lt;p&gt;The implementation of nativeInit lies in main.cpp. Here I found my old friend AppController. AppController is newed here with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;AppController *pAppController = new AppController();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And CCApplication &amp;rsquo;s run is called. run simplely calls applicationDidFinishLaunching, which in turn creates proper scene for battle, as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;pScene = GvGBattle::scene();
PDirector-&amp;gt;runWithScene(pScene)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scenes-defiend-in-classes:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;Scenes defiend in Classes&lt;/h3&gt;

&lt;p&gt;Here is nothing special but cocos2d code.&lt;/p&gt;

&lt;h3 id=&#34;how-does-system-find-native-code:6c42a8da161b7c5eebca7bce4b47308d&#34;&gt;How does system find native code?&lt;/h3&gt;

&lt;p&gt;In QuestbattleActivity, System.loadLibrary is called to load built C++ library, as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; static {
         System.loadLibrary(&amp;quot;game&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the C++ library is descriped in jni/Android.mk where make options are defined. In this file &lt;code&gt;LOCAL_MODULE_FILENAME := libgame&lt;/code&gt; defines the name of built library.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>