<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Django on Notes of wgundamj44</title>
    <link>http://0.0.0.0/tags/docker-django/</link>
    <description>Recent content in Docker Django on Notes of wgundamj44</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Aug 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://0.0.0.0/tags/docker-django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Some project notes(2)</title>
      <link>http://0.0.0.0/post/2015-08-13-project-note2/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://0.0.0.0/post/2015-08-13-project-note2/</guid>
      <description>

&lt;h2 id=&#34;develop-enviroment-with-docker:e7d43dfc46b4cac080bf58b0a0e5c283&#34;&gt;Develop enviroment with Docker&lt;/h2&gt;

&lt;p&gt;I used docker-compose to build my develop enviroment. The project consists of MySQL, django and celery(RabbitMQ). So my docker-compose.yml will be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;db:
  build: ./mysql
  environment:
    - MYSQL_ROOT_PASSWORD=testtest
  volumes:
    - /develop/db:/var/lib/mysql

rabbitmq:
  image: tutum/rabbitmq
environment:
  - RABBITMQ_PASS=guest
ports:
  - &amp;quot;5672:5672&amp;quot;  # we forward this port because it&#39;s useful for debugging
  - &amp;quot;15672:15672&amp;quot;  # here, we can access rabbitmq management plugin

worker:
  build: ./python
  environment:
    - C_FORCE_ROOT=1 # Root is not allowed to use celery by default
  command: celery worker -A projects.celery -n default@%h --loglevel=debug
  volumes:
    - ./mycode:/code # worker and django app shares same code
  links:
    - db
    - rabbitmq

web:
  build: ./python
  environment:
    - DJANGO_SETTINGS_MODULE=my_config #specify setting file to use
  volumes:
    - ./mycode:/code # mount my code to /code in container
    - /var/log/django:/var/log/django
  command: python manage.py runserver 0.0.0.0:8000
  ports:
    - &amp;quot;8000:8000&amp;quot;
  links:
    - db
    - rabbitmq
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN apt-get update;apt-get install -y mysql-client gettext vim
RUN mkdir /code
RUN mkdir /var/log/django
WORKDIR /code
ADD ./myocde/requirements.txt /code/
RUN pip install -r requirements.txt
RUN pip install ipython
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-two-sites:e7d43dfc46b4cac080bf58b0a0e5c283&#34;&gt;start two sites&lt;/h3&gt;

&lt;p&gt;Sometimes I need to test my site with different config file. So I made a copy of the docker-compose.yml, and name it site2.yml. Then in site2.yml,
I change the port mapping of web to other ports, eg. 1234:1234.&lt;/p&gt;

&lt;p&gt;Then with &lt;code&gt;docker-compose -f site2.yml run --serive-ports python manage.py 0.0.0.0:1234&lt;/code&gt;, I can start another site with port 1234.
Note that the &amp;ndash;service-ports option  makes the port mapping of web available in started container.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>